// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NekoSpace.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NekoSpace.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230301110323_Change animetitle relation 5")]
    partial class Changeanimetitlerelation5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c22a01e9-392a-4f05-b1a8-b9c7003ebd1c",
                            ConcurrencyStamp = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cb0f73f9-683d-46ee-82bf-e3baf32ba108",
                            ConcurrencyStamp = "1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "cdb992b4-6861-44b6-a2a2-c7ca6a31f4fc",
                            ConcurrencyStamp = "1",
                            Name = "Creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = "f139609b-2598-43e9-bc2c-bfe1cade0a53",
                            ConcurrencyStamp = "1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "7deeae8b-01d9-45c8-80eb-885f93559895",
                            ConcurrencyStamp = "1",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3036207b-14ce-430f-a70f-d6ab9dfe5a22",
                            RoleId = "c22a01e9-392a-4f05-b1a8-b9c7003ebd1c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Anime.AnimeSynopsisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("AnimeSynopsis", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Anime.AnimeTitleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("AnimeTitle", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Character.AnotherCharacterServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AnilistId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnimeDBId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyAnimeList")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Character.CharacterAboutEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MediaId");

                    b.ToTable("CharacterTitles", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.AnotherMangaServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AnilistId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnimeDBId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.MangaSynopsisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid")
                        .HasColumnName("MangaId");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MangaSynopsis", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.MangaTitleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("MediaId");

                    b.ToTable("MangaTitles", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserAnimeViewingStatusEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("UserAnimeViewingStatus", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3036207b-14ce-430f-a70f-d6ab9dfe5a22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "394cbad4-fd32-490e-8a35-c5333f2f6da7",
                            Email = "admin@example.local",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.LOCAL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcnJe+yZ9BMU/ZP+V42eQaJYhEMQw4gKoLXDQFEHKcwhElL+c2NC7MkZJu2onNIdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9dbc0ce6-fc67-4bce-bd4a-2af056ef3371",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserFavoriteAnimeEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("UserFavoriteAnime", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserRatingAnimeEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("RatingValue")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("UserRatingAnime", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AiredEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("From")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCharacterEntity", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("AnimeId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("AnimeCharacters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCoverEntity", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeCover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AiringStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodesDurationSeconds")
                        .HasColumnType("integer");

                    b.Property<int?>("NumEpisodes")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeGenreEntity", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("AnimeId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AnimeGenre");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimePosterEntity", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.HasIndex("PosterId")
                        .IsUnique();

                    b.ToTable("AnimePoster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnotherAnimeServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AniSearchId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnilistId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnimeDBId")
                        .HasColumnType("integer");

                    b.Property<string>("AnimePlanetId")
                        .HasColumnType("text");

                    b.Property<int?>("KitsuId")
                        .HasColumnType("integer");

                    b.Property<int?>("LivechartMeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyAnimeList")
                        .HasColumnType("integer");

                    b.Property<string>("NotifyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.PremierEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Sezon")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterCoverEntity", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterCover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterNamesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<bool>("LanguageDetectionBySystem")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MediaId");

                    b.ToTable("CharacterNames", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterPosterEntity", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterPoster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<string>("Large")
                        .HasColumnType("text");

                    b.Property<string>("Medium")
                        .HasColumnType("text");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Small")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCharacterEntity", b =>
                {
                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("MangaId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("MangaCharacters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCoverEntity", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaCoverEntity");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChaptersCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Publishing")
                        .HasColumnType("boolean");

                    b.Property<int>("ReadStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Volumes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaGenreEntity", b =>
                {
                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("MangaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MangaGenreEntity");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaPosterEntity", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaPosterEntity");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.PublishedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("From")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Anime.AnimeSynopsisEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Media")
                        .WithMany("Synopsises")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Anime.AnimeTitleEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Media")
                        .WithMany("Titles")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Character.AnotherCharacterServiceEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", null)
                        .WithOne("AnotherService")
                        .HasForeignKey("NekoSpace.Data.Contracts.Entities.Character.AnotherCharacterServiceEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Character.CharacterAboutEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Abouts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.AnotherMangaServiceEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", null)
                        .WithOne("AnotherService")
                        .HasForeignKey("NekoSpace.Data.Contracts.Entities.Manga.AnotherMangaServiceEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.MangaSynopsisEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Synopsises")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpace.Data.Contracts.Entities.Manga.MangaTitleEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Titles")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserAnimeViewingStatusEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("ViewingStatusInUsers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", "User")
                        .WithMany("AnimeViewingStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserFavoriteAnimeEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("FavoriteInUsers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", "User")
                        .WithMany("FavoriteAnimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserRatingAnimeEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("RatingInUsers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpace.Data.Models.User.UserEntity", "User")
                        .WithMany("RatingAnimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AiredEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", null)
                        .WithOne("Aired")
                        .HasForeignKey("NekoSpaceList.Models.Anime.AiredEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCharacterEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("Characters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Animes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCoverEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("Covers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeGenreEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+GenreEntity", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimePosterEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", "Anime")
                        .WithMany("Posters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Poster")
                        .WithOne("Posters")
                        .HasForeignKey("NekoSpaceList.Models.Anime.AnimePosterEntity", "PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnotherAnimeServiceEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", null)
                        .WithOne("AnotherService")
                        .HasForeignKey("NekoSpaceList.Models.Anime.AnotherAnimeServiceEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.PremierEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.AnimeEntity", null)
                        .WithOne("Premier")
                        .HasForeignKey("NekoSpaceList.Models.Anime.PremierEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterCoverEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Covers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterNamesEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Names")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterPosterEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Posters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCharacterEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.CharacterEntity", "Character")
                        .WithMany("Mangas")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Characters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCoverEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Covers")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cover");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaGenreEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+GenreEntity", "Genre")
                        .WithMany("Mangas")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Genres")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaPosterEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", "Manga")
                        .WithMany("Posters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+ImageEntity", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.PublishedEntity", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.MangaEntity", null)
                        .WithOne("Published")
                        .HasForeignKey("NekoSpaceList.Models.Manga.PublishedEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.UserEntity", b =>
                {
                    b.Navigation("AnimeViewingStatuses");

                    b.Navigation("FavoriteAnimes");

                    b.Navigation("RatingAnimes");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeEntity", b =>
                {
                    b.Navigation("Aired");

                    b.Navigation("AnotherService")
                        .IsRequired();

                    b.Navigation("Characters");

                    b.Navigation("Covers");

                    b.Navigation("FavoriteInUsers");

                    b.Navigation("Genres");

                    b.Navigation("Posters");

                    b.Navigation("Premier");

                    b.Navigation("RatingInUsers");

                    b.Navigation("Synopsises");

                    b.Navigation("Titles");

                    b.Navigation("ViewingStatusInUsers");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterEntity", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Animes");

                    b.Navigation("AnotherService")
                        .IsRequired();

                    b.Navigation("Covers");

                    b.Navigation("Mangas");

                    b.Navigation("Names");

                    b.Navigation("Posters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+GenreEntity", b =>
                {
                    b.Navigation("Animes");

                    b.Navigation("Mangas");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+ImageEntity", b =>
                {
                    b.Navigation("Posters")
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaEntity", b =>
                {
                    b.Navigation("AnotherService")
                        .IsRequired();

                    b.Navigation("Characters");

                    b.Navigation("Covers");

                    b.Navigation("Genres");

                    b.Navigation("Posters");

                    b.Navigation("Published")
                        .IsRequired();

                    b.Navigation("Synopsises");

                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
