// <auto-generated />
using System;
using AnimeDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NekoSpace.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c233bc2b-8667-4172-8d08-7ca08092e289",
                            ConcurrencyStamp = "1",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "8a8b95ac-eb6f-4f07-bc57-0bd2f863839c",
                            ConcurrencyStamp = "1",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "70eccf39-dee5-4d9a-a0ae-d79cb500d9d7",
                            ConcurrencyStamp = "1",
                            Name = "Creator",
                            NormalizedName = "Creator"
                        },
                        new
                        {
                            Id = "1e651010-017d-41aa-879b-e34b1c162bc2",
                            ConcurrencyStamp = "1",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "3f3560f5-7832-4ae5-8aaa-ce842f034163",
                            ConcurrencyStamp = "1",
                            Name = "Guest",
                            NormalizedName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7df613a5-3027-4d55-8f3c-2b2a2a31fb12",
                            RoleId = "c233bc2b-8667-4172-8d08-7ca08092e289"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NekoSpace.Data.Models.User.NekoUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7df613a5-3027-4d55-8f3c-2b2a2a31fb12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8257901-f978-4a01-9aa4-4a91661c21fe",
                            Email = "admin@example.local",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00ea5660-85d0-4296-b155-291b0d5798d1",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Aired", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("From");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("To");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Anime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AgeRating");

                    b.Property<string>("AiringStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AiringStatus");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<int?>("EpisodesDurationSeconds")
                        .HasColumnType("integer");

                    b.Property<int?>("NumEpisodes")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("NumEpisodes");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Undefined")
                        .HasColumnName("Source");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCharacter", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("AnimeId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("AnimeCharacters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCover", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeCover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeGenre", b =>
                {
                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("AnimeId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AnimeGenre");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimePoster", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.HasIndex("PosterId")
                        .IsUnique();

                    b.ToTable("AnimePoster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeSynopsis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid")
                        .HasColumnName("AnimeId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeSynopsis", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid")
                        .HasColumnName("AnimeId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeTitle", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnotherAnimeService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AniSearchId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnilistId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnimeDBId")
                        .HasColumnType("integer");

                    b.Property<string>("AnimePlanetId")
                        .HasColumnType("text");

                    b.Property<int?>("KitsuId")
                        .HasColumnType("integer");

                    b.Property<int?>("LivechartMeId")
                        .HasColumnType("integer");

                    b.Property<int?>("MyAnimeList")
                        .HasColumnType("integer");

                    b.Property<string>("NotifyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Premier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Sezon")
                        .HasColumnType("integer")
                        .HasColumnName("Sezon");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Animes", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt1");

                    b.HasKey("Id");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterAbout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterTitles", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterCover", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterCover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterNames", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterNames", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterPoster", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterPoster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("From");

                    b.Property<string>("Large")
                        .HasColumnType("text")
                        .HasColumnName("Large");

                    b.Property<string>("Medium")
                        .HasColumnType("text")
                        .HasColumnName("Medium");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Original");

                    b.Property<string>("Small")
                        .HasColumnType("text")
                        .HasColumnName("Small");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.AnotherMangaService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AnilistId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnimeDBId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.Manga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChaptersCount")
                        .HasColumnType("integer")
                        .HasColumnName("ChaptersCount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("Publishing")
                        .HasColumnType("boolean")
                        .HasColumnName("Publishing");

                    b.Property<int>("ReadStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Volumes")
                        .HasColumnType("integer")
                        .HasColumnName("Volumes");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCharacter", b =>
                {
                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("MangaId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("MangaCharacters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCover", b =>
                {
                    b.Property<int>("CoverId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.HasKey("CoverId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaCover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaGenre", b =>
                {
                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("MangaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MangaGenre");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaPoster", b =>
                {
                    b.Property<int>("PosterId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid");

                    b.HasKey("PosterId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaPoster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaSynopsis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid")
                        .HasColumnName("MangaId");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaSynopsis", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer")
                        .HasColumnName("From");

                    b.Property<bool?>("IsAcceptProposal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMain");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("uuid")
                        .HasColumnName("MangaId");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()::timestamp");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaTitles", (string)null);
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.Published", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Mangas", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.NekoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.NekoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpace.Data.Models.User.NekoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NekoSpace.Data.Models.User.NekoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Aired", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", null)
                        .WithOne("Aired")
                        .HasForeignKey("NekoSpaceList.Models.Anime.Aired", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCharacter", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Characters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Animes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeCover", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Covers")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeGenre", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Genre", "Genre")
                        .WithMany("Animes")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimePoster", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Posters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Poster")
                        .WithOne("Posters")
                        .HasForeignKey("NekoSpaceList.Models.Anime.AnimePoster", "PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeSynopsis", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Synopsises")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnimeTitle", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", "Anime")
                        .WithMany("Titles")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.AnotherAnimeService", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", null)
                        .WithOne("AnotherService")
                        .HasForeignKey("NekoSpaceList.Models.Anime.AnotherAnimeService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Premier", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Anime.Anime", null)
                        .WithOne("Premier")
                        .HasForeignKey("NekoSpaceList.Models.Anime.Premier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterAbout", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Abouts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterCover", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Covers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterNames", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Names")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.CharacterPoster", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Posters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.AnotherMangaService", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.Manga", null)
                        .WithOne("AnotherService")
                        .HasForeignKey("NekoSpaceList.Models.Manga.AnotherMangaService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCharacter", b =>
                {
                    b.HasOne("NekoSpaceList.Models.CharacterModels.Character", "Character")
                        .WithMany("Mangas")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Characters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaCover", b =>
                {
                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Covers")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cover");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaGenre", b =>
                {
                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Genre", "Genre")
                        .WithMany("Mangas")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Genres")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaPoster", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Posters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NekoSpaceList.Models.General.GeneralModel+Image", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaSynopsis", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Synopsises")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.MangaTitle", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.Manga", "Manga")
                        .WithMany("Titles")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.Published", b =>
                {
                    b.HasOne("NekoSpaceList.Models.Manga.Manga", null)
                        .WithOne("Published")
                        .HasForeignKey("NekoSpaceList.Models.Manga.Published", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Anime.Anime", b =>
                {
                    b.Navigation("Aired");

                    b.Navigation("AnotherService")
                        .IsRequired();

                    b.Navigation("Characters");

                    b.Navigation("Covers");

                    b.Navigation("Genres");

                    b.Navigation("Posters");

                    b.Navigation("Premier");

                    b.Navigation("Synopsises");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("NekoSpaceList.Models.CharacterModels.Character", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Animes");

                    b.Navigation("Covers");

                    b.Navigation("Mangas");

                    b.Navigation("Names");

                    b.Navigation("Posters");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+Genre", b =>
                {
                    b.Navigation("Animes");

                    b.Navigation("Mangas");
                });

            modelBuilder.Entity("NekoSpaceList.Models.General.GeneralModel+Image", b =>
                {
                    b.Navigation("Posters")
                        .IsRequired();
                });

            modelBuilder.Entity("NekoSpaceList.Models.Manga.Manga", b =>
                {
                    b.Navigation("AnotherService")
                        .IsRequired();

                    b.Navigation("Characters");

                    b.Navigation("Covers");

                    b.Navigation("Genres");

                    b.Navigation("Posters");

                    b.Navigation("Published")
                        .IsRequired();

                    b.Navigation("Synopsises");

                    b.Navigation("Titles");
                });
#pragma warning restore 612, 618
        }
    }
}
